#include <Arduino.h>
#include <Wire.h>
#include "Adafruit_VL53L0X.h"

// ===== ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì =====
const int SDA_BUS1 = 19, SCL_BUS1 = 22;  // ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå #1, #2
const int SDA_BUS2 = 25, SCL_BUS2 = 26;  // ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå #3, #4

// ‡∏™‡∏£‡πâ‡∏≤‡∏á I2C instances
TwoWire I2C_Bus1 = TwoWire(0);
TwoWire I2C_Bus2 = TwoWire(1);

// ‡∏™‡∏£‡πâ‡∏≤‡∏á sensor objects
Adafruit_VL53L0X sensor_bus1, sensor_bus2;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏•‡∏±‡∏Å
uint16_t distances[2] = {0, 0};
String busNames[2] = {"Bus1(S1+S2)", "Bus2(S3+S4)"};
bool sensorReady[2] = {false, false};
unsigned long detectionCount = 0;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
uint16_t stableDistances[2] = {500, 500};
unsigned long lastDetection = 0;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥
unsigned long drinkingStartTime[2] = {0, 0};
unsigned long drinkingEndTime[2] = {0, 0};
unsigned long totalDrinkingTime[2] = {0, 0};
bool isDrinking[2] = {false, false};
int drinkingSession = 0;

// ===== SETUP =====
void setup() {
  Serial.begin(115200);
  delay(2000);
  
  Serial.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
  Serial.println("‚ïë     ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á (Fixed)   ‚ïë");
  Serial.println("‚ïë    VL53L0X Pet Detection System     ‚ïë");
  Serial.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
  Serial.println();
  
  Serial.println("üìã ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:");
  Serial.println("   ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå #1,#2: SDA=GPIO19, SCL=GPIO22");
  Serial.println("   ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå #3,#4: SDA=GPIO25, SCL=GPIO26");
  Serial.println();
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô I2C Bus
  Serial.println("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô I2C Bus...");
  I2C_Bus1.begin(SDA_BUS1, SCL_BUS1, 100000);
  I2C_Bus2.begin(SDA_BUS2, SCL_BUS2, 100000);
  delay(1000);  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
  Serial.println("‚ïê‚ïê‚ïê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ Adafruit Library ‚ïê‚ïê‚ïê");
  
  Serial.print("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Bus 1... ");
  if (sensor_bus1.begin(VL53L0X_I2C_ADDR, false, &I2C_Bus1)) {
    sensorReady[0] = true;
    Serial.println("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î
    sensor_bus1.configSensor(Adafruit_VL53L0X::VL53L0X_SENSE_DEFAULT);
    delay(100);
  } else {
    Serial.println("‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
  }
  
  Serial.print("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Bus 2... ");
  if (sensor_bus2.begin(VL53L0X_I2C_ADDR, false, &I2C_Bus2)) {
    sensorReady[1] = true;
    Serial.println("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î
    sensor_bus2.configSensor(Adafruit_VL53L0X::VL53L0X_SENSE_DEFAULT);
    delay(100);
  } else {
    Serial.println("‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
  }
  
  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
  int working = sensorReady[0] + sensorReady[1];
  Serial.println();
  Serial.print("üìä ‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ: ");
  Serial.print(working);
  Serial.println("/2 Bus ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
  
  if (working > 0) {
    Serial.println("üöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô!");
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    Serial.println();
    Serial.println("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:");
    testInitialReading();
    
    // ‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    Serial.println();
    calibrateBaseline();
  } else {
    Serial.println("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!");
    Serial.println("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢ VIN, GND, SDA, SCL");
  }
  
  Serial.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  Serial.println();
}

// ===== LOOP =====
void loop() {
  static unsigned long lastReading = 0;
  static unsigned long lastDisplay = 0;
  static unsigned long lastStatistics = 0;
  
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å 300ms
  if (millis() - lastReading >= 300) {
    readSensors();
    detectMovement();
    lastReading = millis();
  }
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  if (millis() - lastDisplay >= 3000) {
    displayResults();
    lastDisplay = millis();
  }
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  if (millis() - lastStatistics >= 30000) {
    displayDrinkingStatistics();
    lastStatistics = millis();
  }
  
  delay(100);
}

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° =====

void testInitialReading() {
  for (int i = 0; i < 2; i++) {
    if (sensorReady[i]) {
      Serial.print("   ");
      Serial.print(busNames[i]);
      Serial.print(": ");
      
      // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢ single shot mode
      uint16_t distance = 0;
      if (i == 0) {
        distance = sensor_bus1.readRange();
      } else {
        distance = sensor_bus2.readRange();
      }
      
      if (distance > 0 && distance < 4000) {
        Serial.print(distance);
        Serial.println("mm ‚úÖ");
      } else {
        Serial.print(distance);
        Serial.println("mm ‚ùå (‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥)");
      }
    }
  }
}

void calibrateBaseline() {
  Serial.println("üìù ‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô...");
  Serial.println("   (‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)");
  
  uint32_t sum[2] = {0, 0};
  int count[2] = {0, 0};
  uint16_t readings[2][10];  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  
  for (int i = 0; i < 10; i++) {
    delay(500);
    readSensors();
    
    for (int j = 0; j < 2; j++) {
      if (sensorReady[j] && distances[j] != 0xFFFF && distances[j] > 10 && distances[j] < 2000) {
        readings[j][count[j]] = distances[j];
        sum[j] += distances[j];
        count[j]++;
      }
    }
    Serial.print(".");
  }
  Serial.println();
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏•‡∏∞ standard deviation
  for (int i = 0; i < 2; i++) {
    if (count[i] > 7) {  // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 7 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      stableDistances[i] = sum[i] / count[i];
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì standard deviation
      uint32_t variance = 0;
      for (int j = 0; j < count[i]; j++) {
        int diff = readings[i][j] - stableDistances[i];
        variance += diff * diff;
      }
      uint16_t stdDev = sqrt(variance / count[i]);
      
      Serial.print("‚úÖ ");
      Serial.print(busNames[i]);
      Serial.print(" ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: ");
      Serial.print(stableDistances[i]);
      Serial.print("mm (¬±");
      Serial.print(stdDev);
      Serial.println("mm)");
    } else {
      stableDistances[i] = 500;  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      Serial.print("‚ö†Ô∏è ");
      Serial.print(busNames[i]);
      Serial.println(" ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 500mm");
    }
  }
  Serial.println();
}

void readSensors() {
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Bus 1
  if (sensorReady[0]) {
    uint16_t reading = sensor_bus1.readRange();
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    if (reading > 0 && reading < 4000) {
      distances[0] = reading;
    } else {
      distances[0] = 0xFFFF;
    }
  }
  
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Bus 2
  if (sensorReady[1]) {
    uint16_t reading = sensor_bus2.readRange();
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    if (reading > 0 && reading < 4000) {
      distances[1] = reading;
    } else {
      distances[1] = 0xFFFF;
    }
  }
}

void detectMovement() {
  const uint16_t THRESHOLD = 100;       // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 100mm ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß
  const uint16_t MIN_DISTANCE = 30;     // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
  const uint16_t MAX_DISTANCE = 1500;   // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
  const unsigned long COOLDOWN = 15000; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  const uint16_t RETURN_THRESHOLD = 50; // ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥
  
  static int consecutiveChanges[2] = {0, 0};
  static bool detectionActive[2] = {false, false};
  static unsigned long lastActivity[2] = {0, 0};
  static uint16_t originalBaseline[2] = {0, 0};
  
  for (int i = 0; i < 2; i++) {
    if (sensorReady[i] && distances[i] != 0xFFFF) {
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å baseline ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
      if (originalBaseline[i] == 0) {
        originalBaseline[i] = stableDistances[i];
      }
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å baseline ‡πÄ‡∏î‡∏¥‡∏°
      uint16_t changeFromOriginal = abs((int16_t)distances[i] - (int16_t)originalBaseline[i]);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à
      if (distances[i] >= MIN_DISTANCE && distances[i] <= MAX_DISTANCE) {
        
        // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏¢‡∏π‡πà ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if (detectionActive[i]) {
          if (changeFromOriginal < RETURN_THRESHOLD) {
            // ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°
            detectionActive[i] = false;
            consecutiveChanges[i] = 0;
            lastActivity[i] = millis();
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°
            if (isDrinking[i]) {
              drinkingEndTime[i] = millis();
              totalDrinkingTime[i] = drinkingEndTime[i] - drinkingStartTime[i];
              isDrinking[i] = false;
              
              Serial.println();
              Serial.println("‚úÖ ‚ïê‚ïê‚ïê ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥ ‚ïê‚ïê‚ïê");
              Serial.print("üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ");
              Serial.println(busNames[i]);
              Serial.print("‚è±Ô∏è  ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏∑‡πà‡∏°: ");
              Serial.print(totalDrinkingTime[i] / 1000);
              Serial.print(".");
              Serial.print((totalDrinkingTime[i] % 1000) / 100);
              Serial.println(" ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");
              Serial.print("üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ");
              Serial.print(distances[i]);
              Serial.print("mm (‡∏ê‡∏≤‡∏ô: ");
              Serial.print(originalBaseline[i]);
              Serial.println("mm)");
              Serial.print("üç∂ ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ó‡∏µ‡πà: ");
              Serial.println(drinkingSession);
              Serial.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
              Serial.println();
            }
          }
        } else {
          // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÉ‡∏´‡∏°‡πà
          if (changeFromOriginal > THRESHOLD) {
            consecutiveChanges[i]++;
            
            // ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô cooldown ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            if (consecutiveChanges[i] >= 2 && 
                (millis() - lastDetection > COOLDOWN) &&
                !detectionActive[i]) {
              
              detectionCount++;
              drinkingSession++;
              lastDetection = millis();
              detectionActive[i] = true;
              lastActivity[i] = millis();
              
              // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°
              isDrinking[i] = true;
              drinkingStartTime[i] = millis();
              
              Serial.println();
              Serial.println("üö® ‚ïê‚ïê‚ïê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥ ‚ïê‚ïê‚ïê");
              Serial.print("üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ");
              Serial.println(busNames[i]);
              Serial.print("üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ");
              Serial.print(distances[i]);
              Serial.println("mm");
              Serial.print("üìê ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°: ");
              Serial.print(originalBaseline[i]);
              Serial.println("mm");
              Serial.print("üîÑ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: ");
              Serial.print(changeFromOriginal);
              Serial.println("mm");
              
              // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
              if (distances[i] < originalBaseline[i]) {
                Serial.println("üêæ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡πÅ‡∏°‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏ô‡πâ‡∏≥");
              } else {
                Serial.println("üêæ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡πÅ‡∏°‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏ô‡πâ‡∏≥ (‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô)");
              }
              
              Serial.print("üç∂ ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ó‡∏µ‡πà: ");
              Serial.print(drinkingSession);
              Serial.print(" | ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ");
              Serial.print(millis() / 1000);
              Serial.println("‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");
              Serial.println("‚è∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°...");
              Serial.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
              Serial.println();
              
              consecutiveChanges[i] = 0;
              break;
            }
          } else {
            consecutiveChanges[i] = 0;
          }
        }
      } else {
        // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ MIN_DISTANCE - ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©
        if (distances[i] < MIN_DISTANCE && originalBaseline[i] > MIN_DISTANCE * 3) {
          if (!detectionActive[i] && (millis() - lastDetection > COOLDOWN)) {
            detectionCount++;
            drinkingSession++;
            lastDetection = millis();
            detectionActive[i] = true;
            lastActivity[i] = millis();
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°
            isDrinking[i] = true;
            drinkingStartTime[i] = millis();
            
            Serial.println();
            Serial.println("üö® ‚ïê‚ïê‚ïê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥ (‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏≤‡∏Å) ‚ïê‚ïê‚ïê");
            Serial.print("üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ");
            Serial.println(busNames[i]);
            Serial.print("üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: ");
            Serial.print(distances[i]);
            Serial.println("mm (‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏≤‡∏Å!)");
            Serial.print("üìê ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°: ");
            Serial.print(originalBaseline[i]);
            Serial.println("mm");
            Serial.println("üêæ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡πÅ‡∏°‡∏ß‡∏°‡∏≤‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏≤‡∏Å");
            Serial.print("üç∂ ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ó‡∏µ‡πà: ");
            Serial.print(drinkingSession);
            Serial.print(" | ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ");
            Serial.print(millis() / 1000);
            Serial.println("‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");
            Serial.println("‚è∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°...");
            Serial.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            Serial.println();
            break;
          }
        }
      }
      
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï baseline ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (30 ‡∏ô‡∏≤‡∏ó‡∏µ)
      if (millis() - lastActivity[i] > 1800000) {
        originalBaseline[i] = distances[i];
        stableDistances[i] = distances[i];
        detectionActive[i] = false;
        consecutiveChanges[i] = 0;
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢
        isDrinking[i] = false;
        drinkingStartTime[i] = 0;
        drinkingEndTime[i] = 0;
        totalDrinkingTime[i] = 0;
      }
    }
  }
}

void displayResults() {
  static bool detectionActive[2] = {false, false};  // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô static ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô detectMovement
  
  Serial.print("üìè [");
  Serial.print(millis() / 1000);
  Serial.print("s] ");
  
  for (int i = 0; i < 2; i++) {
    Serial.print(busNames[i]);
    Serial.print(": ");
    
    if (!sensorReady[i]) {
      Serial.print("OFF");
    } else if (distances[i] == 0xFFFF) {
      Serial.print("ERR");
    } else {
      Serial.print(distances[i]);
      Serial.print("mm");
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥
      if (isDrinking[i]) {
        unsigned long currentDrinkingTime = millis() - drinkingStartTime[i];
        Serial.print("[üç∂");
        Serial.print(currentDrinkingTime / 1000);
        Serial.print("s]");
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      if (stableDistances[i] > 0) {
        int change = (int16_t)distances[i] - (int16_t)stableDistances[i];
        Serial.print("(");
        if (change > 0) Serial.print("+");
        Serial.print(change);
        Serial.print(")");
      }
    }
    
    if (i == 0) Serial.print(" | ");
  }
  
  Serial.print(" | ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥: ");
  Serial.print(drinkingSession);
  Serial.print("‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
  
  // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  if (drinkingSession > 0 && lastDetection > 0) {
    unsigned long secSinceDetection = (millis() - lastDetection) / 1000;
    Serial.print(" (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ");
    Serial.print(secSinceDetection);
    Serial.print("‡∏ß‡∏¥)");
  }
  
  Serial.println();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
void displayDrinkingStatistics() {
  Serial.println();
  Serial.println("üìä ‚ïê‚ïê‚ïê ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥ ‚ïê‚ïê‚ïê");
  Serial.print("üç∂ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ");
  Serial.print(drinkingSession);
  Serial.println(" ‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
  
  if (drinkingSession > 0) {
    Serial.println("üìà ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á:");
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    unsigned long totalTime = 0;
    int completedSessions = 0;
    
    for (int i = 0; i < 2; i++) {
      if (totalDrinkingTime[i] > 0) {
        completedSessions++;
        totalTime += totalDrinkingTime[i];
        
        Serial.print("   ");
        Serial.print(busNames[i]);
        Serial.print(": ");
        Serial.print(totalDrinkingTime[i] / 1000);
        Serial.print(".");
        Serial.print((totalDrinkingTime[i] % 1000) / 100);
        Serial.println(" ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
      if (isDrinking[i]) {
        unsigned long currentTime = millis() - drinkingStartTime[i];
        Serial.print("   ");
        Serial.print(busNames[i]);
        Serial.print(": ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∑‡πà‡∏°... (");
        Serial.print(currentTime / 1000);
        Serial.print(".");
        Serial.print((currentTime % 1000) / 100);
        Serial.println(" ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)");
      }
    }
    
    if (completedSessions > 0) {
      Serial.print("‚åõ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á: ");
      Serial.print((totalTime / completedSessions) / 1000);
      Serial.print(".");
      Serial.print(((totalTime / completedSessions) % 1000) / 100);
      Serial.println(" ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    unsigned long timeSinceLastDrink = (millis() - lastDetection) / 1000;
    Serial.print("üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ");
    Serial.print(timeSinceLastDrink / 60);
    Serial.print(" ‡∏ô‡∏≤‡∏ó‡∏µ ");
    Serial.print(timeSinceLastDrink % 60);
    Serial.println(" ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");
  }
  
  Serial.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  Serial.println();
}
