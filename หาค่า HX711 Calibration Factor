// HX711 Calibration Factor Finder
// ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ Calibration Factor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Load Cell

#include "HX711.h"

#define LOADCELL_DOUT_PIN  2
#define LOADCELL_SCK_PIN   3

HX711 scale;

void setup() {
    Serial.begin(115200);
    Serial.println("\n=== HX711 Calibration Factor Finder ===");
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô HX711
    scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
    delay(2000);
    
    if (!scale.is_ready()) {
        Serial.println("‚ùå HX711 ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°!");
        while(1);
    }
    
    Serial.println("‚úÖ HX711 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    scale.set_scale();
    scale.tare(20);  // Tare ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 20 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    
    Serial.println("\n=== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ Calibration ===");
    Serial.println("1. ‡∏ß‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 100g, 500g, 1000g)");
    Serial.println("2. ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô '100' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 100 ‡∏Å‡∏£‡∏±‡∏°");
    Serial.println("3. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Calibration Factor ‡πÉ‡∏´‡πâ");
    Serial.println("4. ‡∏û‡∏¥‡∏°‡∏û‡πå 'test' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥");
    Serial.println("5. ‡∏û‡∏¥‡∏°‡∏û‡πå 'reset' ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Tare ‡πÉ‡∏´‡∏°‡πà");
    Serial.println("\n‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß! ‡∏ß‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å:");
}

void loop() {
    if (Serial.available()) {
        String input = Serial.readString();
        input.trim();
        
        if (input == "test") {
            testCalibration();
        }
        else if (input == "reset") {
            resetTare();
        }
        else {
            float knownWeight = input.toFloat();
            if (knownWeight > 0) {
                calculateCalibrationFactor(knownWeight);
            } else {
                Serial.println("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)");
            }
        }
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ Raw reading ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
    static unsigned long lastPrint = 0;
    if (millis() - lastPrint > 1000) {
        long rawReading = scale.get_units();
        Serial.println("Raw reading: " + String(rawReading));
        lastPrint = millis();
    }
}

void calculateCalibrationFactor(float knownWeight) {
    Serial.println("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Calibration Factor...");
    Serial.println("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô: " + String(knownWeight, 2) + "g");
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ Raw ‡∏à‡∏≤‡∏Å HX711 ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    Serial.println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤... (‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà)");
    
    long rawReading = 0;
    int numReadings = 20;
    
    for (int i = 0; i < numReadings; i++) {
        rawReading += scale.get_units();
        Serial.print(".");
        delay(100);
    }
    Serial.println();
    
    rawReading = rawReading / numReadings; // ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Calibration Factor
    float calibrationFactor = (float)rawReading / knownWeight;
    
    Serial.println("\n=== ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ===");
    Serial.println("Raw Reading (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢): " + String(rawReading));
    Serial.println("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô: " + String(knownWeight, 2) + "g");
    Serial.println("Calibration Factor: " + String(calibrationFactor, 6));
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
    scale.set_scale(calibrationFactor);
    delay(1000);
    
    float measuredWeight = scale.get_units(10);
    float error = abs(measuredWeight - knownWeight);
    float errorPercent = (error / knownWeight) * 100;
    
    Serial.println("\n=== ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ===");
    Serial.println("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ: " + String(measuredWeight, 2) + "g");
    Serial.println("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + String(error, 2) + "g (" + String(errorPercent, 1) + "%)");
    
    if (errorPercent < 2.0) {
        Serial.println("‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏î‡∏µ‡∏°‡∏≤‡∏Å! (< 2%)");
    } else if (errorPercent < 5.0) {
        Serial.println("‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏û‡∏≠‡πÉ‡∏ä‡πâ (2-5%)");
    } else {
        Serial.println("‚ùå ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡πà‡∏≥ (> 5%) - ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô");
    }
    
    Serial.println("\nüìã Copy ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ:");
    Serial.println("float calibrationFactor = " + String(calibrationFactor, 6) + ";");
    Serial.println("scale.set_scale(calibrationFactor);");
    
    Serial.println("\n‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏´‡∏£‡∏∑‡∏≠ 'test' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á");
}

void testCalibration() {
    Serial.println("\n=== ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ===");
    Serial.println("‡∏ß‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏π‡∏ú‡∏• (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î)");
    
    while (!Serial.available()) {
        float weight = scale.get_units(5);
        Serial.println("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: " + String(weight, 2) + "g");
        delay(1000);
    }
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô buffer
    while (Serial.available()) {
        Serial.read();
    }
    
    Serial.println("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß");
    Serial.println("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠ calibrate ‡πÉ‡∏´‡∏°‡πà:");
}

void resetTare() {
    Serial.println("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Tare ‡πÉ‡∏´‡∏°‡πà...");
    Serial.println("‡πÄ‡∏≠‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Load Cell ‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏î");
    Serial.println("‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...");
    
    delay(3000);
    
    scale.tare(20);
    
    Serial.println("‚úÖ Tare ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô");
    Serial.println("‡∏ß‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å:");
}
